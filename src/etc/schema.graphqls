##
# ScandiPWA_CatalogGraphQl
#
# @category    ScandiPWA
# @package     ScandiPWA_CatalogGraphQl
# @author      Viktors Pliska <info@scandiweb.com>
# @author      Valerijs Sceglovs <info@scandiweb.com>
# @author      Raivis Dejus <info@scandiweb.com>
# @copyright   Copyright (c) 2018 Scandiweb, Ltd (https://scandiweb.com)
##

type MediaGalleryImageOfType @doc(description: "Products thumbnail image") {
    type: String @doc(description: "Product image type")
    url: String @doc(description: "Product image url")
}

input ProductFilterInput {
    category_url_key: FilterTypeInput @doc(description: "Category url_key the product belongs to")
    category_url_path: FilterTypeInput @doc(description: "Category url_path the product belongs to")
    color: FilterTypeInput @doc(description: "Product color")
    size: FilterTypeInput @doc(description: "Product size")
    shoes_size: FilterTypeInput @doc(description: "Product shoes size")
    conditions: FilterTypeInput @doc(description: "Searches products by JSON formatted conditions")
}

input ProductSortInput {
    position: SortEnum @doc(description: "A number assigned to a product")
}

type MediaGalleryEntry  @doc(description: "MediaGalleryEntry defines characteristics about images and videos associated with a specific product") {
    thumbnail: MediaGalleryImageOfType @doc(description: "The path of the thumbnail image on the server thumbnail")
    base: MediaGalleryImageOfType @doc(description: "The path of the thumbnail image on the server thumbnail")
}

type ProductImage @doc(description: "Extend product Image fields for frontend-driven loading mechanism") {
    path: String @doc(description: "Relative path to origin image") @resolver(class:"ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\Product\\ProductImage\\Path")
}

type Query {
    category (
        id: Int @doc(description: "Ids of the category")
        url_path: String @doc(description: "Url path of the category")
    ): CategoryTree
    @resolver(class: "ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\CategoryTree")
}

interface ProductInterface {
    attributes: [AttributeWithValue] @resolver(class:"ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\AttributesWithValue")
}

interface CategoryInterface {
    canonical_url: String @doc(description: "Canonical Url") @resolver(class: "ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\Category\\CanonicalUrl")
}

type AttributeWithValue {
    attribute_code: String
    entity_type: String
    attribute_type: String
    attribute_value: String
    attribute_label: String
    attribute_id: Int
    attribute_options: [AttributeWithValueOption]
}

type AttributeWithValueOption {
    label: String
    value: String
    swatch_data: AttributeWithValueSwatchData
}

type AttributeWithValueSwatchData {
    type: String
    value: String
}

type Products {
    min_price: Float @doc(description: "Minimal price among all selected items")
    max_price: Float @doc(description: "Maximal price among all selected items")
}

type CategoryProducts {
    min_price: Float @doc(description: "Minimal price among all selected items")
    max_price: Float @doc(description: "Maximal price among all selected items")
}
