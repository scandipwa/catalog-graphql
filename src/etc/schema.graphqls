##
# ScandiPWA_CatalogGraphQl
#
# @category    ScandiPWA
# @package     ScandiPWA_CatalogGraphQl
# @author      Viktors Pliska <info@scandiweb.com>
# @author      Valerijs Sceglovs <info@scandiweb.com>
# @author      Raivis Dejus <info@scandiweb.com>
# @copyright   Copyright (c) 2018 Scandiweb, Ltd (https://scandiweb.com)
##

type MediaGalleryImageOfType @doc(description: "Products thumbnail image") {
    type: String @doc(description: "Product image type")
    url: String @doc(description: "Product image url")
}

input ProductAttributeFilterInput {
    conditions: FilterTypeInput @doc(description: "Searches products by JSON formatted conditions")
    customer_group_id: FilterTypeInput @doc(description: "Modifies product prices based on customer group")
    news_from_date: FilterTypeInput @doc(description: "The beginning date for new product listings, and determines if the product is featured as a new product.")
    news_to_date: FilterTypeInput @doc(description: "The end date for new product listings.")
}

type MediaGalleryEntry  @doc(description: "MediaGalleryEntry defines characteristics about images and videos associated with a specific product") {
    thumbnail: MediaGalleryImageOfType @doc(description: "The path of the thumbnail image on the server thumbnail")
    base: MediaGalleryImageOfType @doc(description: "The path of the thumbnail image on the server thumbnail")
}

type ProductImage @doc(description: "Extend product Image fields for frontend-driven loading mechanism") {
    path: String @doc(description: "Relative path to origin image") @resolver(class:"ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\Product\\ProductImage\\Path")
}

type CategoryTree {
    is_active: Boolean @doc(description: "Category is enabled")
}

interface ProductInterface {
    qty: Float @doc(description: "Qty field for checkout order view")
    stock_item: ProductStockItem @resolver(class: "ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\Inventory\\StockCount")
    url: String @resolver(class: "ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\Product\\Url")
}

interface CategoryInterface {
    url: String  @resolver(class: "ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\Category\\Url")
}

type Products {
    min_price: Float @doc(description: "Minimal price among all selected items")
    max_price: Float @doc(description: "Maximal price among all selected items")
}

type ProductStockItem {
    qty: Float @doc(description: "Product quantity available in stock")
    min_sale_qty: Int @doc(description: "Minimal amount of item that can be bought")
    max_sale_qty: Int @doc(description: "Maximal amount of item that can be bought")
}

extends type Breadcrumb {
    category_url: String @doc(description: "Trimmed URL rewrite")
    category_is_active: Boolean @doc(description: "Is category active")
}

interface AggregationOptionInterface {
    swatch_data: SwatchData @doc(description: "Swatch data") @resolver(class: "ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\Aggregations\\SwatchData")
}

type Mutation {
    saveSelectedCurrency(currency: String): Query @resolver(class:"ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\Currency\\SaveSelectedCurrency")
}

type Query {
    currencyData: CurrencyConfig @resolver(class: "ScandiPWA\\CatalogGraphQl\\Model\\Resolver\\Currency\\CurrencyResolver") @doc(description: "The currency data query")
}

type CurrencyConfig {
    available_currencies_data: [Currency],
    current_currency_code: String
}

type Currency {
    id: String
    label: String
    value: String
}
